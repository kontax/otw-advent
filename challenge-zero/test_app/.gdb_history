c
b main
r
b _start
r
b main
r
i r xmm0 xmm3
ni
i r xmm0 xmm3
b main
r
ni
i r xmm0 xmm3
b main
r
si
x/x buffer
x/x *buffer
x/20x buffer
x/s $ecx
b main
r
ni
BBB
x/s ecx
x/s $ecx
b main
r
si
x/s $ecx
si
b main
r
si
si
i r xmm0 xmm3
b main
r
b main
r
ni
fin
b *main+19
c
i r xmm3
b main
r
ni
b *main+19
c
i r xmm3
x/x *tst
x/x tst
x/16b 0x804a020
x/16bx 0x804a020
ni
i r xmm3
q
b main
r
b *main*27
c
r
b *main+27
c
i r smm3
i r xmm3
x
b main
b *main+27
r
c
i r xmm3
b *main+27
r
i r xmm3
b *main+27
r
i r xmm3
b *main+27
r
b main
r
ni
fin
ni
ni
x/s $ecx
ni
b *main+20
c
ni
i r xmm3
b main
r
b *main+27
c
i r xmm3
b *main+27
r
i r xmm3
q
b *main+27
r
i r xmm3
b *main+27
r
i r xmm3
b *main+27
r
i r xmm3
b *main+27
r
i r xmm3
b main
r
ni
display $xmm0->v4_int32
display $xmm1->v4_int32
display $xmm2->v4_int32
display $xmm3->v4_int32
undisplay
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
ni
ni
ni
ni
ni
ni
ni
ni
b main
r
ni
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
ni
b main
r
ni
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
b main
r
ni
b main
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
r
ni
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
b main
r
ni
b main
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
r
ni
b main
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
r
ni
q
b main
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
r
ni
b main
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
r
ni
b main
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
r
ni
ni
ni
ni
b main
    # Group source into 4 longs
    source_unpacked = unpack('<LLLL', source.to_bytes(16, 'little'))
    # Split out `n` into the 4 values that point to which source to copy over
    mask = [int('{:08b}'.format(n)[i:i+2], 2) for i in range(0, 8, 2)][::-1]
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
r
ni
ni
b main
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
r
ni
ni
ni
b main
display/x $xmm0->v4_int32
display/x $xmm1->v4_int32
display/x $xmm2->v4_int32
display/x $xmm3->v4_int32
r
ni
ni
ni
ni
ni
ni
ni
ni
ni
b main
r
ni
x/x *loc_7cc4+3
x/x 0x8049097
x/bx 0x8049097
ni
x/bx 0x8049097
display/bx 0x8049097
ni
i r eflags
ni
ni
i r ah bh
